{"version":3,"file":"abilities.js","sources":["../../src/services/abilities.ts"],"sourcesContent":["import Service from '@ember/service';\nimport Ability from '../ability.ts';\nimport { assert } from '@ember/debug';\nimport { getOwner } from '@ember/owner';\nimport normalizeAbilityString from '../-private/normalize.ts';\n\nexport default class AbilitiesService extends Service {\n  /**\n   * Parse abilityString into an object with extracted propertyName and abilityName\n   * eg. for 'create projects in account' -> `{ propertyName: 'createProjects', abilityName: 'account'}`\n   * @public\n   * @param  {String} string eg. 'create projects in account'\n   * @return {Object}        extracted propertyName and abilityName\n   */\n  parse(abilityString: string): ReturnType<typeof normalizeAbilityString> {\n    return normalizeAbilityString(abilityString);\n  }\n\n  /**\n   * Create an instance of Ability\n   * @public\n   * @param  {String} abilityName     name of ability class\n   * @param  {*}      model\n   * @param  {Object} [properties={}] extra properties (to be set on the ability instance)\n   * @return {Ability}                Ability instance of requested ability\n   */\n  abilityFor(\n    abilityName: string,\n    model?: unknown,\n    properties: Record<string, unknown> = {},\n  ): Ability {\n    const AbilityFactory = getOwner(this)?.factoryFor(`ability:${abilityName}`);\n\n    assert(`No ability type found for '${abilityName}'`, AbilityFactory);\n\n    if (typeof model !== 'undefined') {\n      properties = { model, ...properties };\n    }\n\n    const ability = AbilityFactory.create(properties);\n    assert(\n      `Ability '${abilityName}' has to inherit from ember-can Ability`,\n      isAbilityClass(ability), // \"ability instanceof Ability\" is not working cause of a bug in ember-auto-import see https://github.com/embroider-build/ember-auto-import/issues/588\n    );\n\n    return ability;\n  }\n\n  /**\n   * Returns a value for requested ability in specified ability class\n   * @public\n   * @param  {String} propertyName name of ability, eg `createProjects`\n   * @param  {String} abilityName  name of ability class\n   * @param  {*}      model\n   * @param  {Object} properties   extra properties (to be set on the ability instance)\n   * @return {*}                   value of ability\n   */\n  valueFor(\n    propertyName: string,\n    abilityName: string,\n    model?: unknown,\n    properties?: Record<string, unknown>,\n  ): unknown {\n    const ability = this.abilityFor(abilityName, model, properties);\n    const result = ability.getAbility(propertyName, model, properties);\n\n    ability.destroy();\n\n    return result;\n  }\n\n  /**\n   * Returns `true` if ability is permitted\n   * @public\n   * @param  {[type]} abilityString eg. 'create projects in account'\n   * @param  {*}      model\n   * @param  {[type]} properties    extra properties (to be set on the ability instance)\n   * @return {Boolean}              value of ability converted to boolean\n   */\n  can(\n    abilityString: string,\n    model?: unknown,\n    properties?: Record<string, unknown>,\n  ): boolean {\n    const { propertyName, abilityName } = this.parse(abilityString);\n    return !!this.valueFor(propertyName, abilityName, model, properties);\n  }\n\n  /**\n   * Returns `true` if ability is not permitted\n   * @public\n   * @param  {[type]} abilityString eg. 'create projects in account'\n   * @param  {*}      model\n   * @param  {[type]} properties    extra properties (to be set on the ability instance)\n   * @return {Boolean}              value of ability converted to boolean\n   */\n  cannot(\n    abilityString: string,\n    model?: unknown,\n    properties?: Record<string, unknown>,\n  ): boolean {\n    return !this.can(abilityString, model, properties);\n  }\n}\n\nfunction isAbilityClass(\n  possibleAbilityClass: unknown,\n): possibleAbilityClass is Ability {\n  const abilityClass = possibleAbilityClass as Ability;\n  return (\n    abilityClass.parseProperty !== undefined &&\n    typeof abilityClass.parseProperty === 'function' &&\n    abilityClass.getAbility !== undefined &&\n    typeof abilityClass.getAbility === 'function'\n  );\n}\n"],"names":["AbilitiesService","Service","parse","abilityString","normalizeAbilityString","abilityFor","abilityName","model","properties","AbilityFactory","getOwner","factoryFor","assert","ability","create","isAbilityClass","valueFor","propertyName","result","getAbility","destroy","can","cannot","possibleAbilityClass","abilityClass","parseProperty","undefined"],"mappings":";;;;;;;AAMe,MAAMA,gBAAgB,SAASC,OAAO,CAAC;AACpD;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,KAAKA,CAACC,aAAqB,EAA6C;IACtE,OAAOC,sBAAsB,CAACD,aAAa,CAAC;AAC9C;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEE,UAAUA,CACRC,WAAmB,EACnBC,KAAe,EACfC,UAAmC,GAAG,EAAE,EAC/B;AACT,IAAA,MAAMC,cAAc,GAAGC,QAAQ,CAAC,IAAI,CAAC,EAAEC,UAAU,CAAC,CAAA,QAAA,EAAWL,WAAW,CAAA,CAAE,CAAC;AAE3EM,IAAAA,MAAM,CAAC,CAA8BN,2BAAAA,EAAAA,WAAW,CAAG,CAAA,CAAA,EAAEG,cAAc,CAAC;AAEpE,IAAA,IAAI,OAAOF,KAAK,KAAK,WAAW,EAAE;AAChCC,MAAAA,UAAU,GAAG;QAAED,KAAK;QAAE,GAAGC;OAAY;AACvC;AAEA,IAAA,MAAMK,OAAO,GAAGJ,cAAc,CAACK,MAAM,CAACN,UAAU,CAAC;IACjDI,MAAM,CACJ,YAAYN,WAAW,CAAA,uCAAA,CAAyC,EAChES,cAAc,CAACF,OAAO,CAAC;KACxB;AAED,IAAA,OAAOA,OAAO;AAChB;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEG,QAAQA,CACNC,YAAoB,EACpBX,WAAmB,EACnBC,KAAe,EACfC,UAAoC,EAC3B;IACT,MAAMK,OAAO,GAAG,IAAI,CAACR,UAAU,CAACC,WAAW,EAAEC,KAAK,EAAEC,UAAU,CAAC;IAC/D,MAAMU,MAAM,GAAGL,OAAO,CAACM,UAAU,CAACF,YAAY,EAAEV,KAAK,EAAEC,UAAU,CAAC;IAElEK,OAAO,CAACO,OAAO,EAAE;AAEjB,IAAA,OAAOF,MAAM;AACf;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,GAAGA,CACDlB,aAAqB,EACrBI,KAAe,EACfC,UAAoC,EAC3B;IACT,MAAM;MAAES,YAAY;AAAEX,MAAAA;AAAY,KAAC,GAAG,IAAI,CAACJ,KAAK,CAACC,aAAa,CAAC;AAC/D,IAAA,OAAO,CAAC,CAAC,IAAI,CAACa,QAAQ,CAACC,YAAY,EAAEX,WAAW,EAAEC,KAAK,EAAEC,UAAU,CAAC;AACtE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEc,EAAAA,MAAMA,CACJnB,aAAqB,EACrBI,KAAe,EACfC,UAAoC,EAC3B;IACT,OAAO,CAAC,IAAI,CAACa,GAAG,CAAClB,aAAa,EAAEI,KAAK,EAAEC,UAAU,CAAC;AACpD;AACF;AAEA,SAASO,cAAcA,CACrBQ,oBAA6B,EACI;EACjC,MAAMC,YAAY,GAAGD,oBAA+B;EACpD,OACEC,YAAY,CAACC,aAAa,KAAKC,SAAS,IACxC,OAAOF,YAAY,CAACC,aAAa,KAAK,UAAU,IAChDD,YAAY,CAACL,UAAU,KAAKO,SAAS,IACrC,OAAOF,YAAY,CAACL,UAAU,KAAK,UAAU;AAEjD;;;;"}