{"version":3,"file":"normalize.js","sources":["../../src/-private/normalize.ts"],"sourcesContent":["import { camelize } from '@ember/string';\nimport { singularize } from 'ember-inflector';\n\nconst stopWords = ['of', 'in', 'for', 'to', 'from', 'on', 'as'];\n\n/**\n * Normalize string into an object with extracted propertyName and abilityName\n * eg. for 'create projects in account' -> `{ propertyName: 'createProjects', abilityName: 'account'}`\n * @private\n * @param  {String} string eg. 'create projects in account'\n * @return {Object}        extracted propertyName and abilityName\n */\nexport default function (string: string) {\n  const parts = string.split(' ');\n  const abilityName = singularize(parts.pop() as string);\n  const last = parts[parts.length - 1];\n\n  if (stopWords.includes(last as string)) {\n    parts.pop();\n  }\n\n  const propertyName = camelize(parts.join(' '));\n\n  return { propertyName, abilityName };\n}\n"],"names":["stopWords","string","parts","split","abilityName","singularize","pop","last","length","includes","propertyName","camelize","join"],"mappings":";;;AAGA,MAAMA,SAAS,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACe,+BAAA,EAAUC,MAAc,EAAE;AACvC,EAAA,MAAMC,KAAK,GAAGD,MAAM,CAACE,KAAK,CAAC,GAAG,CAAC;EAC/B,MAAMC,WAAW,GAAGC,WAAW,CAACH,KAAK,CAACI,GAAG,EAAY,CAAC;EACtD,MAAMC,IAAI,GAAGL,KAAK,CAACA,KAAK,CAACM,MAAM,GAAG,CAAC,CAAC;AAEpC,EAAA,IAAIR,SAAS,CAACS,QAAQ,CAACF,IAAc,CAAC,EAAE;IACtCL,KAAK,CAACI,GAAG,EAAE;AACb;EAEA,MAAMI,YAAY,GAAGC,QAAQ,CAACT,KAAK,CAACU,IAAI,CAAC,GAAG,CAAC,CAAC;EAE9C,OAAO;IAAEF,YAAY;AAAEN,IAAAA;GAAa;AACtC;;;;"}